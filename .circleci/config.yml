####################################################################################################
#
# FILENAME:     config.yml
#
# PURPOSE:      Configuration file for the CircleCI build automation tool.
#
# DESCRIPTION:  CircleCI requires the presence of a configuration file at the following path:
#                  <repository-root>/.circleci/config.yml
#               When changes are committed to a tracked repository, CircleCI will checkout the
#               appropriate branch and follow the instructions in config.yml to perform a build.
#               Authentication with various Salesforce orgs (eg. your Dev Hub) is performed via
#               force:auth:jwt:grant.  Generation of a self-signed SSL certificate and creation
#               of a Connected App in the orgs you must authenticate to are required before a
#               successful build can be performed.
#
# INSTRUCTIONS: 1. Create a self-signed SSL certificate and private key using the helper script
#                     <repository-root>dev-tools/make-server-key
#
#               2. Create a connected app using the certificate from step one.  See the Trailhead
#                  module, "Create Your Connected App" for more details. (linked provided below)
#
#               3. Create the following CircleCI environment variables in the "org-global" context.
#                     DEVHUB_CONSUMER_KEY
#                     DEVHUB_SERVER_KEY_HEX
#                     DEVHUB_SFDC_USERNAME
#
#               4. Modify this basic CircleCI config file to suit your needs.  See the inline
#                  comments for guidance as to how you might configure this for your purposes.
#
# RELATED DOCS: Create Your Connected App (Trailhead Module)
#               └─ https://trailhead.salesforce.com/trails/sfdx_get_started/modules/sfdx_travis_ci/units/sfdx_travis_ci_connected_app
#
#               CircleCI Contexts, Environment Variables, and Configuration Reference
#               ├─ https://circleci.com/docs/2.0/contexts/
#               ├─ https://circleci.com/docs/2.0/env-vars/
#               └─ https://circleci.com/docs/2.0/configuration-reference/
#
#               Salesforce DX Documentation
#               ├─ Salesforce DX Setup Guide
#               │  └─ https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_setup_intro.htm
#               ├─ Salesforce DX Developer Guide
#               │  └─ https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_intro.htm
#               └─ Salesforce CLI Command Reference
#                  └─ https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference.htm
#
####################################################################################################
version: 2
jobs:
####################################################################################################
## JOB:     build
## PURPOSE: Creates an RSA private key in a build workspace directory based on values from
##          environment variables that are available to this project.
####################################################################################################
  build:
    docker:
      - image: ncino/ci-sfdx
    steps:
      - run:
          name: Display version info for the Salesforce CLI and core plugins (will force updates if needed)
          command: |
            sfdx version          # Output the version of the CLI
            sfdx plugins --core   # Output the version of the core plugins
      - run:
          name: Prepare all JWT Key Files that might be required by subsequent jobs
          command: |
            # Create directory where all JWT Org Keys will be stored
            mkdir /tmp/sfdx-keys
            # Convert the Hex Keys stored in the context's environment variables back to binary
            echo $DEVHUB_SERVER_KEY_HEX | xxd -r -ps >> /tmp/sfdx-keys/dev-hub.key
            echo $PKGORG_SERVER_KEY_HEX | xxd -r -ps >> /tmp/sfdx-keys/pkg-org.key
            # Confirm that our converted keys are both valid RSA Private Keys
            openssl rsa -in /tmp/sfdx-keys/dev-hub.key -check -noout
            openssl rsa -in /tmp/sfdx-keys/pkg-org.key -check -noout
      - run:
          name: Validate connection/authentication against the Dev Hub
          command: |
            # Confirm that the key can actually be used to login to the specific
            # Salesforce Org that the username stored in $DEVHUB_SFDC_USERNAME
            # is associated with.
            sfdx force:auth:jwt:grant --clientid $DEVHUB_CONSUMER_KEY \
                                      --jwtkeyfile /tmp/sfdx-keys/dev-hub.key \
                                      --username $DEVHUB_SFDC_USERNAME
      - run:
          name: Validate connection/authentication against the Packaging Org
          command: |
            # Confirm that the key can actually be used to login to the specific
            # Salesforce Org that the username stored in $PKGORG_SFDC_USERNAME
            # is associated with.
            sfdx force:auth:jwt:grant --clientid $PKGORG_CONSUMER_KEY \
                                      --jwtkeyfile /tmp/sfdx-keys/pkg-org.key \
                                      --username $PKGORG_SFDC_USERNAME

      ######
      # NOTE: If you have additional orgs to connect to (eg. UAT Orgs) as part of
      # a complete build workflow, you should create additional private key files and
      # validate authentication here. This way, if there are any issues with creating the
      # Private Keys or authenticating to the specified orgs, the entire workflow can
      # "fail fast" (here and now), rather than consume resources for a partial build.
      ######

      # Ensure that that the dev-hub.key and pkg-org.key files that were just created will be
      # available to other jobs performed during this build.  This way, subsequent
      # builds can skip the step of constructing the key files from the environment
      # variables.
      - persist_to_workspace:
          root: /tmp/sfdx-keys
          paths:
            - dev-hub.key
            - pkg-org.key

      # Store SFDX logs as artifacts
      - store_artifacts:
          path: ~/.sfdx/sfdx.log
          destination: sfdx-logs

####################################################################################################
## JOB:     test_build
## PURPOSE: Builds and tests against a specific org shape.
####################################################################################################
  test_build:
    docker:
      - image: ncino/ci-sfdx
    environment:
      - SCRATCH_ORG_CONFIG: test-scratch-def.json
      - TEST_RESULTS_PATH:  /tmp/test-results
      - TEST_RESULTS_DIR:   test
    steps:
      - checkout                  # Required step.  Checks out the code from your repositoryd.
      - attach_workspace:
          at: /tmp/sfdx-keys      # Attaches the workspace where our private key files were stored.
      - run:
          name: Display version info for the Salesforce CLI and core plugins (will force updates if needed)
          command: |
            sfdx version          # Output the version of the CLI
            sfdx plugins --core   # Output the version of the core plugins
      - run:
          name: Authenticate the Salesforce CLI to the Dev Hub using JWT
          command: |
            sfdx force:auth:jwt:grant -i $DEVHUB_CONSUMER_KEY \
                                      -f /tmp/sfdx-keys/dev-hub.key \
                                      -u $DEVHUB_SFDC_USERNAME \
                                      -d \
                                      -a DevHub
      - run:
          name: Create a new scratch org
          command: |
            sfdx force:org:create -f config/$SCRATCH_ORG_CONFIG \
                                  -a circle_build_$CIRCLE_BUILD_NUM \
                                  -s
      - run:
          name: Push SFDX source to the scratch org
          command: |
            sfdx force:source:push  -u circle_build_$CIRCLE_BUILD_NUM \
                                    -w 20
      - run:
          name: Import data required by the tests.
          command: |
            sfdx force:data:tree:import --plan data/CurrencyType-plan.json
            sfdx force:data:tree:import --plan data/UP2GO_ITE__CustomSettings__c-plan.json
      - run:
          name: Adjust admin user and add permissions
          command: |
            sfdx force:user:permset:assign  -n "ExpenseManager" \
                                            -u circle_build_$CIRCLE_BUILD_NUM
            sfdx force:user:permset:assign  -n "Traveler" \
                                            -u circle_build_$CIRCLE_BUILD_NUM

            sfdx force:data:record:update -s User -w "Name='User User'" -v "DefaultCurrencyIsoCode=EUR"
      - run:
          name: Create artifact directory to store test results
          command: |
            mkdir -p "$TEST_RESULTS_PATH/$TEST_RESULTS_DIR"
      - run:
          name: Run all local (unpackaged) Apex tests in the scratch org
          command: |
            sfdx force:apex:test:run  -d $TEST_RESULTS_PATH/$TEST_RESULTS_DIR \
                                      -u circle_build_$CIRCLE_BUILD_NUM \
                                      -l RunLocalTests \
                                      -r human \
                                      -w 10 \
                                      -c
      - run:
          name: Mark all scratch orgs created by this job for deletion
          command: |
            sfdx force:org:delete -u circle_build_$CIRCLE_BUILD_NUM \
                                  -p

      # Store test results and SFDX logs as artifacts
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - store_artifacts:
          path: ~/.sfdx/sfdx.log
          destination: sfdx-logs

####################################################################################################
## JOB:     create_beta_package
## PURPOSE: Deploys successfully built and tested code to the packaging org so it can be prepped
##          for a new BETA package version upload.
####################################################################################################
  create_beta_package:
    docker:
      - image: ncino/ci-sfdx
    environment:
      - PACKAGE_NAME:         "Travelexpenses"                # Name of your managed package
      - PACKAGE_VERSION_NAME: "X (Travelexpenses)"                 # Version Name for your managed package
      - METADATA_PACKAGE_ID:  "033F00000001hRiIAI"            # Metadata Package ID (always begins with 033)
      - PACKAGE_DIRECTORY:    "./sfdx-source/travelexpenses_x"  # SFDX package directory that has your code
    steps:
      - checkout                  # Required step.  Checks out the code from your repository.
      - attach_workspace:
          at: /tmp/sfdx-keys      # Attaches the workspace where our private key files were stored.
      - run:
          name: Display version info for the Salesforce CLI and core plugins (will force updates if needed)
          command: |
            sfdx version          # Output the version of the CLI
            sfdx plugins --core   # Output the version of the core plugins
      - run:
          name: Authenticate the Salesforce CLI to the Packaging Org using JWT
          command: |
            sfdx force:auth:jwt:grant -i $PKGORG_CONSUMER_KEY \
                                      -f /tmp/sfdx-keys/pkg-org.key \
                                      -u $PKGORG_SFDC_USERNAME \
                                      -d \
                                      -a PkgOrg
      - run:
          name: Convert SFDX source to MDAPI source
          command: |
            sfdx force:source:convert -r "$PACKAGE_DIRECTORY" \
                                      -d "./mdapi-source/circle_build_$CIRCLE_BUILD_NUM" \
                                      -n "$PACKAGE_NAME" \
                                      --loglevel error
      - run:
          name: Deploy MDAPI Source to the Packaging Org
          command: |
            sfdx force:mdapi:deploy -d "./mdapi-source/circle_build_$CIRCLE_BUILD_NUM" \
                                    -l RunLocalTests \
                                    -u PkgOrg \
                                    -w 15 \
                                    --verbose \
                                    --loglevel error
      - run:
          name: List current version history for the first-generation package about to be uploaded
          command: |
            sfdx force:package1:version:list  -u PkgOrg \
                                              -i $METADATA_PACKAGE_ID \
                                              --loglevel error
      - run:
          name: Create (upload) a new MANAGED BETA package version
          command: |
            sfdx force:package1:version:create  -i $METADATA_PACKAGE_ID \
                                                -n "$PACKAGE_VERSION_NAME" \
                                                -d "Package version generated by CI process" \
                                                -u PkgOrg \
                                                -w 15 \
                                                --loglevel error

      # Store SFDX logs as artifacts
      - store_artifacts:
          path: ~/.sfdx/sfdx.log
          destination: sfdx-logs

####################################################################################################
## WORKFLOW:  build_and_test
## PURPOSE:   Primary workflow used by the CI process.
####################################################################################################
workflows:
  version: 2
  build_and_test:
    jobs:
      - build:
          context: org-global
          filters:
            branches:
              only:
                - master   # Normally, this might be "master". This should be configured after template is customized.
      - test_build:
          context: org-global
          requires:
            - build
      - create_beta_package:
          context: org-global
          requires:
            - build

#END-OF-CONFIG-FILE#