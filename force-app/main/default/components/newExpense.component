<apex:component >
    <apex:attribute name="expense" description="This is the Expense to create." type="Expense__c" required="true"/>
    <apex:attribute name="title" description="the title of the section." type="String" required="true"/>
    <apex:attribute name="hasMessages" description="Boolean value determening wether or not a page has ApexPages.Messages" type="Boolean" required="true"/>
    <apex:attribute name="theme" description="The Visualstrap theme" type="String" required="true"/>
    <apex:attribute name="limitSearch" description="Limiting of Google autocomplete results." type="Boolean"/>
    
    <c:importvisualstrap theme="{!theme}" />
    
    <style>  
        body{  
            font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;  
        }  
        .intro{  
            margin-top:20px;  
            font-size:140%;  
            font-weight: 200;  
        }  
    </style>
    
    <c:visualstrapblock >
    
        <br/>
        
        <apex:form id="form">
            
            
            <!-- HIDDEN FIELDS -->
            <apex:inputHidden value="{!expense.lkp_LocationFrom__c}" id="locationFrom"/>
            <apex:inputHidden value="{!expense.lkp_Location__c}" id="locationTo"/>
            <script type="text/javascript">
                locationFromId = '{!$Component.locationFrom}';
                locationToId = '{!$Component.locationTo}';
            </script>
            
            
            <!-- WARNINGS -->
            <apex:outputPanel layout="block" styleClass="container" rendered="{!hasMessages}">
                <c:alert type="danger">
                    <h5><apex:messages /></h5>
                </c:alert>
                
                <c:alert type="warning">
                    <h5>Please review all shown errors and try submitting again.</h5>
                </c:alert>
            </apex:outputPanel>
            
            
            <!-- BODY-->
            <apex:outputPanel title="{!title}" layout="block" styleClass="container" id="outputPanel">
                <apex:componentBody />
            </apex:outputPanel>
        
        </apex:form>
        
        <!-- SCRIPTS -->
        
        <script src="https://maps.googleapis.com/maps/api/js?language=en&sensor=false&libraries=places" type="text/javascript"></script>
        <script type="text/javascript"> 
            
            google.maps.event.addDomListener(window, 'load', initializeAutoComplete);
            
            var fromId;
            var toId;
            var locationFromId;
            var locationToId;
            
            function initializeAutoComplete() {    
                var from;
                var to;
                var options = { types: ['(cities)'] };
                
                if({!limitSearch}) {
                    from = new google.maps.places.Autocomplete(document.getElementById(fromId), options);
                    to = new google.maps.places.Autocomplete(document.getElementById(toId), options);
                }
                else {
                    from = new google.maps.places.Autocomplete(document.getElementById(fromId));       
                    to = from;
                }
                
                google.maps.event.addListener(from, 'place_changed', findLocationFrom);
                google.maps.event.addListener(to, 'place_changed', findLocationTo);
            }
    
                
            function findLocationFrom() {
                var components = this.getPlace().address_components,
                city = 'n/a';
                country = 'n/a';
                if (components) {
                    for (var c = 0; c < components.length; ++c) {
                    console.log(components[c])
                        if(city == 'n/a') {                  
                            if (components[c].types.indexOf('postal_town') > -1) {
                                city = components[c].long_name;
                            }
                            if (components[c].types.indexOf('administrative_area_level_1') > -1) {
                                city = components[c].long_name;
                            }
                        } 
                        if (components[c].types.indexOf('locality') > -1) {
                            city = components[c].long_name;
                        }
                        if(components[c].types.indexOf('country') > -1 && components[c].types.indexOf('political') > -1 ) {                      
                            country = components[c].short_name; 
                        }
                    }
                }
                console.log('From: ' + city + ' - ' + country)        
                UP2GO_ITE.LocationFinder.findLocation(city, country, function(result, event) { 
                    document.getElementById(locationFromId).value = result;  
                });
            }
            
            
            function findLocationTo() {
                var components = this.getPlace().address_components,
                city = 'n/a';
                country = 'n/a';
                if (components) {
                    for (var c = 0; c < components.length; ++c) {
                    console.log(components[c])
                        if(city == 'n/a') {                  
                            if (components[c].types.indexOf('postal_town') > -1) {
                                city = components[c].long_name;
                            }
                            if (components[c].types.indexOf('administrative_area_level_1') > -1) {
                                city = components[c].long_name;
                            }
                        }              
                        if (components[c].types.indexOf('locality') > -1) {
                            city = components[c].long_name;
                        }
                        if(components[c].types.indexOf('country') > -1 && components[c].types.indexOf('political') > -1 ) {
                            country = components[c].short_name;
                        }
                    }
                }
                console.log('To: ' + city + ' - ' + country)
                UP2GO_ITE.LocationFinder.findLocation(city, country, function(result, event) {
                    document.getElementById(locationToId).value = result; 
                });
            }
                
            document.onkeypress = stopRKey;
            
            function stopRKey(evt) { 
                  var evt = (evt) ? evt : ((event) ? event : null); 
                  var node = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null); 
                  if ((evt.keyCode == 13) && (node.type=="text"))  {return false;} 
            }
        </script>

        <script type='text/javascript' src='/canvas/sdk/js/publisher.js'></script>
        <script type="text/javascript">
            function closePublisher(saveFail) {
                if(!saveFail) {
                    Sfdc.canvas.publisher.publish({ name: "publisher.close",payload:{ refresh:"true" }}); 
                }
            }
        </script>
        <script type="text/javascript"> 
    		var numSubmits = 0; 
    	</script>
    </c:visualstrapblock>

</apex:component>